* impl. marshalling attributes for pinvoke
* raise exceptions everywhere
* implement all those CONV and CONV_OVF opcodes
* impl. value type: simple thing works already
* exceptions: handle exceptions inside unmanaged code
* exceptions: save/restore floating point state
* implement all floating point instruction in x86.brg, we also need to check
  the floating branch instruction - some of them seems to be wrong, we need to
  write better tests for that.
* correctly align value types on the stack and in arrays
* enum types can have several base types (not only int32)
* document the functions and variables in the JIT 
* implement a register set for FP registers (just count register usage on x86)

* Calling conventions:

	Implement fast call

* Overflow conversions:

	Implement CONV_OVF_XXX (constant) variants that emit either
	loads or exceptions (as we can always tell)
	
	